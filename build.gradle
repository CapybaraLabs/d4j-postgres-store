plugins {
	id "org.jetbrains.kotlin.jvm" version "1.5.31"
	id "java-library"
	id "com.github.ben-manes.versions" version "0.39.0"
	id "jacoco"
	id "org.sonarqube" version "3.3"
	id "com.adarshr.test-logger" version "3.0.0"
}


allprojects {
	group = "dev.capybaralabs.d4j-postgres-store"
	version = "0.1.1-SNAPSHOT"

	apply plugin: "maven-publish"

	repositories {
		mavenCentral()
//		maven { url "https://oss.sonatype.org/content/repositories/snapshots" } // D4J snapshots
//		maven { url "https://repo.spring.io/milestone" }                        // D4J snapshots
	}
}

configure(allprojects.findAll { it.name != 'platform' }) {
	apply plugin: "org.jetbrains.kotlin.jvm"

	tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
		kotlinOptions.jvmTarget = 11
	}
	dependencies {
		api platform(project(':platform'))
		annotationProcessor platform(project(':platform'))
		compileOnly platform(project(':platform'))
	}

	publishing {
		publications {
			create("main", MavenPublication) {
				from(components.kotlin)
			}
		}
	}
}

project(':platform') {
	apply plugin: 'java-platform'
	javaPlatform {
		allowDependencies()
	}
	dependencies {
		api platform("org.jetbrains.kotlin:kotlin-bom:1.5.31")
		api platform("org.springframework.boot:spring-boot-dependencies:2.5.5")
		api platform("org.testcontainers:testcontainers-bom:1.16.0")
		api platform("org.junit:junit-bom:5.8.1")
		constraints {
			api "com.discord4j:discord4j-core:3.2.0"
			api "io.r2dbc:r2dbc-postgresql:0.8.10.RELEASE"
			api "io.r2dbc:r2dbc-pool:0.8.7.RELEASE"
		}
	}

	publishing {
		publications {
			create("main", MavenPublication) {
				from(components.javaPlatform)
			}
		}
	}
}

dependencies {
	api "com.discord4j:discord4j-core"
	api "io.r2dbc:r2dbc-postgresql"
	api "io.r2dbc:r2dbc-pool"
	api "org.slf4j:slf4j-api"

	implementation "org.jetbrains.kotlin:kotlin-reflect"
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
	implementation "io.projectreactor.kotlin:reactor-kotlin-extensions"

	testImplementation project(":tck")
	testImplementation "org.testcontainers:postgresql"
	testImplementation "org.testcontainers:r2dbc"
	testImplementation "ch.qos.logback:logback-classic"
	testImplementation "io.projectreactor:reactor-tools"
}

test {
	useJUnitPlatform()
	systemProperty "junit.jupiter.execution.parallel.enabled", "true"
	systemProperty "junit.jupiter.execution.parallel.mode.default", "concurrent"
	systemProperty "junit.jupiter.execution.parallel.mode.classes.default", "concurrent"
	systemProperty "junit.jupiter.extensions.autodetection.enabled", "true"
}

testlogger {
	theme "mocha-parallel"
	slowThreshold 500
	showFullStackTraces true
}

jacocoTestReport {
	reports {
		xml.required.set(true)
	}
}

tasks.withType(org.sonarqube.gradle.SonarQubeTask) {
	dependsOn jacocoTestReport
}
sonarqube {
	properties {
		property "sonar.projectKey", "dev.capybaralabs.d4j.store.postgres:d4j-postgres-store"
	}
}

def isNonStable = { String version ->
	def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
	checkConstraints = true
	rejectVersionIf {
		isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
	}
}
